var searchIndex = {};
searchIndex['fwdlist'] = {"items":[[3,"ListIntoIter","fwdlist","Iterator consuming a list.",null,null],[3,"ListIter","","Read-only iterator over a list.",null,null],[3,"ListIterMut","","Mutable iterator over a list.",null,null],[3,"List","","A simply linked list.",null,null],[3,"Cursor","","A cursor to navigate the list and reshape it.",null,null],[11,"new","","A new empty list.",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"len","","The size of the list in O(1).",0,{"inputs":[{"name":"list"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if list is empty in O(1);",0,{"inputs":[{"name":"list"}],"output":{"name":"bool"}}],[11,"push_front","","Push a new element at the front of the list in O(1).\nCannot fails, only panic!/OOM on memory exhaustion.",0,{"inputs":[{"name":"list"},{"name":"t"}],"output":null}],[11,"pop_front","","Pop a element from the front of the list in O(1).\nReturns None if the list is empty.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"push_back","","Push an element at the end of the list in O(n).\nCannot fails, only panic!/OOM on memory exhaustion.",0,{"inputs":[{"name":"list"},{"name":"t"}],"output":null}],[11,"pop_back","","Pop an element from the end of the list in O(n).\nReturns None if the list is empty.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"clear","","Clear the list in O(n).",0,{"inputs":[{"name":"list"}],"output":null}],[11,"front","","Returns a reference to the first element in the list.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"front_mut","","Returns a mutable reference to the first element in the list.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"back","","Returns a reference to the last element in the list.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"back_mut","","Returns a mutable reference to the last element in the list.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"append","","Moves all elements from `other` to the end of the list in O(self.len());",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":null}],[11,"split_off","","Splits the list into two at the given index in O(at).",0,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"drop","","",0,{"inputs":[{"name":"list"}],"output":null}],[11,"default","","",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"fmt","","",0,{"inputs":[{"name":"list"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"clone_from","","",0,{"inputs":[{"name":"list"},{"name":"self"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"list"},{"name":"i"}],"output":{"name":"list"}}],[11,"extend","","",0,{"inputs":[{"name":"list"},{"name":"i"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"list"},{"name":"h"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"listintoiter"}],"output":{"name":"listintoiter"}}],[11,"next","","",1,{"inputs":[{"name":"listintoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"into_iter","","",0,{"inputs":[{"name":"list"}],"output":{"name":"intoiter"}}],[11,"clone","","",2,{"inputs":[{"name":"listiter"}],"output":{"name":"listiter"}}],[11,"iter","","Returns an iterator over the list yielding read-only references.",0,{"inputs":[{"name":"list"}],"output":{"name":"listiter"}}],[11,"next","","",2,{"inputs":[{"name":"listiter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"peek_next","","Returns a reference to the next element, without moving the iterator.",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"option"}}],[11,"peek_next_mut","","Returns a mutable reference to the next element, without moving the\niterator.",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"option"}}],[11,"insert_next","","Insert `v` just after the element most recently returned by `.next()` in\nO(1).",3,{"inputs":[{"name":"listitermut"},{"name":"t"}],"output":null}],[11,"remove_next","","Remove the element after the one most recently returned by `.next()` in\nO(1);",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"option"}}],[11,"truncate_next","","Truncate the list right after the element most recently return by\n`.next()` in O(1).",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"list"}}],[11,"into","","",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"cursor"}}],[11,"iter_mut","","Returns an iterator over the list yielding mutable references.",0,{"inputs":[{"name":"list"}],"output":{"name":"listitermut"}}],[11,"next","","",3,{"inputs":[{"name":"listitermut"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"cursor","","Return a cursor at the beginning of the list (before the first node).",0,{"inputs":[{"name":"list"}],"output":{"name":"cursor"}}],[11,"value","","A read-only reference to the following node&#39;s value.\nReturn `None` if the cursor is past the end of the list.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"option"}}],[11,"value_mut","","A mutable reference to the following node&#39;s value.\nReturn `None` if the cursor is past the end of the list.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"option"}}],[11,"next","","Move the cursor past the following node. Returns `true` on success,\n`false` if the cursor is already at the end of the list.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"bool"}}],[11,"len","","The lengths of the tail.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"position","","The position from the beginning of the list.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"checkpoint","","Returns a copy of the cursor, freezing `self` while the copy is alive.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"nth","","Move forward by `nth` nodes in O(min(nth, self.len)).\nReturns the number of nodes skipped, which could be less than `nth` if\nthere is not enough remaining nodes.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"last","","Move forward before the last node of the list in O(self.len - 1).\nReturns the number of nodes skipped, which could be less than `nth` if\nthere is not enough remaining nodes.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"end","","Move the cursor forward after the end of the list in O(self.len).",4,{"inputs":[{"name":"cursor"}],"output":{"name":"usize"}}],[11,"insert","","Create a new node containing the value `v` and insert it at the current\nlocation in O(1).",4,{"inputs":[{"name":"cursor"},{"name":"t"}],"output":{"name":"t"}}],[11,"remove","","Remove the following node and return the contained value in O(1).\nReturn `None` if the cursor is past the end of the list.",4,{"inputs":[{"name":"cursor"}],"output":{"name":"option"}}],[11,"truncate","","Truncate the list after the cursor, returning the tail in O(1).",4,{"inputs":[{"name":"cursor"}],"output":{"name":"list"}}],[11,"splice","","Insert the list `other` after the cursor.",4,{"inputs":[{"name":"cursor"},{"name":"list"}],"output":null}],[11,"split","","Split the list after `nth` and return the tail in O(min(at, self.len)).\nThis is the same as:",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"list"}}],[11,"remove_n","","Remove `count` nodes after the cursor in O(min(count, self.len)).\nReturn the removed list.",4,{"inputs":[{"name":"cursor"},{"name":"usize"}],"output":{"name":"list"}}],[11,"into_iter","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"intoiter"}}]],"paths":[[3,"List"],[3,"ListIntoIter"],[3,"ListIter"],[3,"ListIterMut"],[3,"Cursor"]]};
initSearch(searchIndex);
